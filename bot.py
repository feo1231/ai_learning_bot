import asyncio
import logging
import os
from datetime import datetime
from typing import List, Tuple

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramForbiddenError

# üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "7948123186:AAEsauVwTD7N4XV9BOYwFVi1tfQCPCMwTgY"
ADMIN_ID = 380134226

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

STAGES: List[Tuple[str, str]] = [
    ("–û—Å–Ω–æ–≤—ã Python", "https://stepik.org/course/67"),
    ("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –ò–ò", "https://www.khanacademy.org/math"),
    ("–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "https://www.coursera.org/learn/machine-learning"),
    ("–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "https://www.coursera.org/specializations/deep-learning"),
    ("LLM –∏ Chat-–±–æ—Ç—ã", "https://huggingface.co/learn/nlp-course/chapter1"),
    ("–î–µ–ø–ª–æ–π –∏ –æ–±–ª–∞–∫–∞", "https://render.com"),
    ("–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ –∑–∞–∫–∞–∑—ã", "https://github.com")
]

users_data = {}

class AdminState(StatesGroup):
    waiting_task_text = State()
    waiting_notify_time = State()

def get_user_data(user_id: int):
    if user_id not in users_data:
        users_data[user_id] = {"stage": 0, "notify": "", "stats": 0}
    return users_data[user_id]

def get_stage(user_id: int) -> int:
    return get_user_data(user_id)["stage"]

def set_stage(user_id: int, stage: int):
    get_user_data(user_id)["stage"] = stage

def set_notify_time(user_id: int, notify_time: str):
    get_user_data(user_id)["notify"] = notify_time

def get_notify_time(user_id: int) -> str:
    return get_user_data(user_id)["notify"]

def add_stat(user_id: int):
    get_user_data(user_id)["stats"] += 1

def get_stat(user_id: int) -> int:
    return get_user_data(user_id)["stats"]

main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üìö –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üß† –ó–∞–¥–∞–Ω–∏–µ")],
    [KeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    [KeyboardButton(text="‚öôÔ∏è –ü–æ–º–æ—â—å")]
], resize_keyboard=True)

@router.message(F.text == "/start")
async def start_handler(message: Message):
    get_user_data(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º.", reply_markup=main_kb)

@router.message(F.text == "üìö –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress_handler(message: Message):
    stage = get_stage(message.from_user.id)
    lines = [f"{'‚úÖ' if i < stage else '‚¨ú'} {i + 1}. {title}" for i, (title, _) in enumerate(STAGES)]
    await message.answer("–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n" + "\n".join(lines))

@router.message(F.text == "üß† –ó–∞–¥–∞–Ω–∏–µ")
async def task_handler(message: Message):
    stage = get_stage(message.from_user.id)
    if stage >= len(STAGES):
        await message.answer("üéâ –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return
    title, link = STAGES[stage]
    await message.answer(f"üìå –≠—Ç–∞–ø {stage + 1}: {title}\n–°—Å—ã–ª–∫–∞: {link}\n–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'.")
    add_stat(message.from_user.id)

@router.message(F.text.lower().in_(["–≥–æ—Ç–æ–≤–æ", "–≥–æ—Ç–æ–≤", "done"]))
async def done_handler(message: Message):
    stage = get_stage(message.from_user.id)
    set_stage(message.from_user.id, stage + 1)
    await message.answer("–ú–æ–ª–æ–¥–µ—Ü! –≠—Ç–∞–ø –ø—Ä–æ–π–¥–µ–Ω. ‚úÖ")

@router.message(F.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def reminder_handler(message: Message, state: FSMContext):
    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å? (—Ñ–æ—Ä–º–∞—Ç HH:MM –ø–æ –ú–°–ö)")
    await state.set_state(AdminState.waiting_notify_time)

@router.message(AdminState.waiting_notify_time)
async def save_notify(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%H:%M")
        set_notify_time(message.from_user.id, message.text)
        await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}")
        await state.clear()
    except ValueError:
        await message.answer("–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HH:MM")

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stat_handler(message: Message):
    count = get_stat(message.from_user.id)
    await message.answer(f"–¢—ã –æ—Ç–∫—Ä—ã–≤–∞–ª –∑–∞–¥–∞–Ω–∏–µ {count} —Ä–∞–∑(–∞). –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™")

@router.message(F.text == "‚öôÔ∏è –ü–æ–º–æ—â—å")
async def help_handler(message: Message):
    await message.answer("–Ø –±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π. –ü—Ä–æ–≥—Ä–µ—Å—Å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")

async def scheduler():
    while True:
        now = datetime.now().strftime("%H:%M")
        for user_id, data in users_data.items():
            if data["notify"] == now:
                try:
                    await bot.send_message(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ —É—á–∏—Ç—å—Å—è!")
                except TelegramForbiddenError:
                    continue
        await asyncio.sleep(60)

async def main():
    dp.include_router(router)
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

