import logging
import asyncio
import aiofiles
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

API_TOKEN = '–¢–í–û–ô_–¢–û–ö–ï–ù'
ADMIN_ID = 123456789  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö—É—Ä—Å
COURSE = {
    "Python –ë–∞–∑–æ–≤—ã–π": [
        "–£—Ä–æ–∫ 1: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.",
        "–£—Ä–æ–∫ 2: –£—Å–ª–æ–≤–∏—è –∏ —Ü–∏–∫–ª—ã.",
        "–£—Ä–æ–∫ 3: –§—É–Ω–∫—Ü–∏–∏ –∏ –º–æ–¥—É–ª–∏."
    ],
    "–ò–ò –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö": [
        "–£—Ä–æ–∫ 1: –ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?",
        "–£—Ä–æ–∫ 2: –û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.",
        "–£—Ä–æ–∫ 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ò–ò –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏.",
        "–£—Ä–æ–∫ 4: –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏.",
        "–£—Ä–æ–∫ 5: ChatGPT –∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏."
    ]
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState(StatesGroup):
    choosing_course = State()
    viewing_lesson = State()

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ú–æ–π –∫—É—Ä—Å", callback_data="my_course")],
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data="next_lesson")],
        [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å", callback_data="change_course")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

# –°—Ç–∞—Ä—Ç
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id] = {"name": message.from_user.first_name, "course": None, "lesson": 0}

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {hbold(user_data[user_id]['name'])}! üëã\n"
        f"–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ò–ò –∏ Python.\n\n"
        "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –¥–ª—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=course_keyboard()
    )
    await state.set_state(UserState.choosing_course)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
def course_keyboard():
    buttons = [
        [InlineKeyboardButton(text=course, callback_data=f"course_{course}")]
        for course in COURSE
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
@dp.callback_query(F.data.startswith("course_"))
async def choose_course(callback: types.CallbackQuery, state: FSMContext):
    course_name = callback.data.split("course_")[1]
    user_id = callback.from_user.id
    user_data[user_id]["course"] = course_name
    user_data[user_id]["lesson"] = 0

    await callback.message.edit_text(
        f"–¢—ã –≤—ã–±—Ä–∞–ª –∫—É—Ä—Å: <b>{course_name}</b>\n\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        reply_markup=main_menu()
    )
    await state.set_state(UserState.viewing_lesson)

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
@dp.callback_query(F.data == "my_course")
async def show_course(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    course = user_data[user_id].get("course")
    lesson = user_data[user_id].get("lesson", 0)

    if not course:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å.")
        return

    progress = int((lesson / len(COURSE[course])) * 100)
    text = f"üìò –ö—É—Ä—Å: <b>{course}</b>\n" \
           f"üìç –£—Ä–æ–∫: {lesson + 1} –∏–∑ {len(COURSE[course])}\n" \
           f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%"

    await callback.message.edit_text(text, reply_markup=main_menu())

# –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
@dp.callback_query(F.data == "next_lesson")
async def next_lesson(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    course = user_data[user_id].get("course")
    lesson = user_data[user_id].get("lesson", 0)

    if course is None:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å.")
        return

    lessons = COURSE[course]
    if lesson >= len(lessons):
        await callback.message.edit_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å.",
            reply_markup=main_menu()
        )
        return

    await callback.message.edit_text(
        f"<b>{lessons[lesson]}</b>",
        reply_markup=main_menu()
    )
    user_data[user_id]["lesson"] += 1

# –°–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å
@dp.callback_query(F.data == "change_course")
async def change_course(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å:", reply_markup=course_keyboard())
    await state.set_state(UserState.choosing_course)

# –ü–æ–º–æ—â—å
@dp.callback_query(F.data == "help")
async def help_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üß† <b>–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:</b>\n"
        "- /start ‚Äî –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –∫—É—Ä—Å–∞–º–∏\n"
        "- –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ —É—Ä–æ–∫–∞–º\n"
        "- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —á–µ—Ä–µ–∑ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
@dp.errors()
async def error_handler(event, error):
    logging.error(f"–û—à–∏–±–∫–∞: {error}")
    if hasattr(event, 'from_user'):
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}: {error}")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


